
/*

Unités de tailles en CSS (en web)

Unités les plus souvent utilisées en web

px      =>  pixel il est possible de mesure avec des virgules, 23.8px)
em      =>  cadratin. Historiquement unité de mesure en print sur les presses.
            Le cadratin se calcul par rapport à la taille du parent
rem     =>  cadratin racine, lui se calculera toujours depuis la taille racine du cadratin, 
            - soit celle du navigateur 
            - soit celle surchargée dans le :root
%       =>  La taille définie en % se calcule par rapport à l'espace disponible autour de l'élément définie en %
vw & vh =>  vw : viewport width (largeur de la surface d'affichage de l'appareil)
            vh : viewport height ( hauteur d'affichage du l'appareil)
            50vh => 50% de la taille d'affichage du l'appareil
            si la largeur d'affichage du site 360px (100vw)
            50vw = 180px

*/

/* déclarations générales */
/* Emplacement du root : déclarations de surcharge de la feuille de style user agent */
:root{
    font-family: Arial, Helvetica, sans-serif;
    /* il est possible d'utiliser ce qu'on appel des variables en css */
    --base-font-size: 1.2rem; /* sur chrome, 1rem de base c'est 16px, avec cette déclaration, je change le rem de base => (20%16px) => 19.2px */
    font-size: var(--base-font-size);
    --line-height: 1.6rem;
    line-height: var(--line-height);
    scroll-behavior: smooth;
}

*{
    box-sizing: border-box;
}

/* déclarations classes et id */
#exemple-de-tableau,
#tableau-simple {
  border-collapse: collapse;
}

#exemple-de-tableau td,
#exemple-de-tableau th,
#tableau-simple td,
#tableau-simple th {
  border: 1px solid black;
}

.danger {
  color: darkorange;
  font-family: Impact;
  background-color: black;
}

.go-top{
    background-color: rgba(0, 0, 0, 0.5);
    position: fixed;
    right: 0.5rem;
    bottom: 0.5rem;
    border-radius: 1.5rem;
    /*
    padding-top: 1em;
    padding-right: 0.5em;
    padding-bottom: 1em;
    padding-left: 0.5em;
    */
}

.go-top a{
    color: darkorange;
    padding: 0.5rem 1rem;
    display: block;
}

.container{
    width: 100%;
    margin-left: auto;
    margin-right: auto;
}

/* déclarations de structure */

body{
    margin: 0;
}

body > header,
body > nav,
body > main,
body > footer{
    padding: 0.5rem;
}

/* Déclaration CSS adaptatifs avec les media queries */

@media print{
    /* il faut se dire que le viewport d'un print est la page sur laquelle on imprime => si un élément doit apparaître en screen à 10px du haut du viewport, il apparaître sur toutes les pages (ou tous les viewports) qui s'imprimeront */
    @page {
        /* on force l'impression de la page en paysage */
        size: landscape;
        /* on ajoute à la page une marge intérieure de 1rem */
        padding: 1rem;
    }
    /* il s'agit du footer, de la nav et du header ayant comme parent direct la balise body */
    body > footer,
    body > nav,
    body > header,
    .go-top
    {
        display: none;
    }
}

@media screen and (min-width: 576px) {
    .container{
        width: 540px;
    }
}

@media screen and (min-width: 768px) {
    .container{
        width: 720px;
    }
}

/*
Selon les points de ruptures calculés par bootstrap, écrire les media-queries manquantes pour la classe container
<576px	| ≥576px 	|≥768px 	|≥992px 	|≥1200px 	|≥1400px    |≥1600px
100%	| 540px	    |720px	    |960px	    |1140px		|1320px     |1560px
*/

@media screen and (min-width: 992px) {
    .container{
        width: 960px;
    }
}

@media screen and (min-width: 1200px) {
    .container{
        width: 1140px;
    }
}

@media screen and (min-width: 1400px) {
    .container{
        width: 1320px;
    }
}

@media screen and (min-width: 1600px) {
    .container{
        width: 1560px;
    }
}